@page "/SaleIndex"
@inject IRepository repository;
@inject SweetAlertService sweetAlertService;
<h3>Ventas</h3>

<a class="btn btn-primary" href="/Sale/Add">Agregar Venta</a>
<a class="btn btn-primary" href="/ZelleAdd">Agregar Zelle</a>

<GenericList MyList="sales">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Fecha</th>
                    <th>Monto</th>
                    <th>Total</th>                  
                    <th>Observación</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var sl in sales)
                {
                    <tr>
                        <td>@sl.Date.ToLocalTime().ToShortDateString()</td>
                        <td>@sl.Mont</td>
                        <td>@sl.Total</td>                       
                        <td>@sl.Details</td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="text-center">           
            <button class="oi oi-arrow-circle-left m-1" onclick=@(()=>ListSales(false))></button>
            <button class="oi oi-arrow-circle-right" onclick=@(()=>ListSales(true))></button>
        </div>
    </Body>
</GenericList>
@code {
    private List<Sale> sales;
    int pag = 0;

    protected override async Task OnInitializedAsync()
    {
        await ListSales(true);
    }

    private async Task ListSales(bool isNext)
    {

        if (isNext == false) pag--;
        var httpReponse = await repository.Get<List<Sale>>($"{Apis.Sale}/{pag}");
        if (httpReponse.Error)
        {
            var message = await httpReponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        sales = httpReponse.Response;
        if (isNext) pag++;
        
    }
}
