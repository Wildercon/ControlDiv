@page "/Register"

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<h3>Registrar Nuevo Usuario</h3>

<EditForm Model="userDTO" OnValidSubmit="CreateUserAsync">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-6">
            <div class="mb-3">
                <label>Nombres:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Name" />
                    <ValidationMessage For="@(() => userDTO.Name)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Email:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Email" />
                    <ValidationMessage For="@(() => userDTO.Email)" />
                </div>
            </div>
        </div>
        <div class="col-6">
           
            <div class="mb-3">
                <label>Contraseña:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" />
                    <ValidationMessage For="@(() => userDTO.Password)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Confirmación de contraseña:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.PasswordConfirm" />
                    <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                </div>
            </div>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Registrar</button>
</EditForm>

@code {
    private UserDTO userDTO = new();

    private async Task CreateUserAsync()
    {
        

        userDTO.UserName = userDTO.Email;
        userDTO.UserType = UserType.Seller;
        var responseHttp = await repository.Post<UserDTO>($"{Apis.User}/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await sweetAlertService.FireAsync("Confirmación", "Su cuenta ha sido creada con éxito. Se te ha enviado un correo electrónico con las instrucciones para activar tu usuario.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/");
    }
}

