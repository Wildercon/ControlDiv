@page "/Account/Create"
@using System.Text.Json;
@using System.Text;
@inject IRepository repository
@inject SweetAlertService sweet
@inject NavigationManager nav

<h3>Agregar Cuenta</h3>

<EditForm Model="account" OnValidSubmit="Create">
    <DataAnnotationsValidator />
    <div>
        <label>Cuenta</label>
        <div>
            <InputText class="form-control" @bind-Value="account.Name" />
            <ValidationMessage For="(()=> account.Name)" />
        </div>
    </div>
    <div>
        <label>Monto</label>
        <div>
            <InputNumber class="form-control" @bind-Value="account.Mont" />
        </div>
    </div>
    <div>
        <label>Tipo de Moneda</label>
        <div>
            <InputSelect class="form-control" @bind-Value="account.AccountType">
                <option>--Selecciona--</option>
                <option value="USD">USD</option>
                <option value="VES">VES</option>
            </InputSelect>
        </div>
    </div>
    <div class="p-3">
        <button class="btn btn-primary" type="submit">Guardar</button>
    </div>

</EditForm>

@code {
    private Account account = new();
    private async Task Create()
    {
        var httpResponse = await repository.Post(Apis.Account, account);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweet.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        else
        {
            var toast = sweet.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.TopEnd,
                    ShowConfirmButton = true,
                    Timer = 5000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Agregado Exitoso.");
            nav.NavigateTo("/Account");
        }
    }

}